
■ 스프링 클라우드 기반의 시큐리티의 요청 처리 과정
	- DispatcherServlet 서블릿에 요청이 도달하기 전에 동작하는 스프링 시큐리티의 연결된 
	   처리 흐름인 필터 체인의 과정을 알아보자

	1) SecurityContextPersitenceFilter : SecurityContext 를 로드하고 저장	   
														 요청과 관련된 보안 컨텍스트를 로드하거나 저장하는 역할 
														 요청이 도달하면 이 필터는 SecurityContext를 로드 함	 
														 여기서 유효한 SecurityContext 가 없다면, 다음 필터로 진행
														 	
	2) HeaderWriterFilter : 	보안 관련 HTTP 헤더를 추가 
										HTTP 응답 헤더를 추가하거나, 수정하는 역할, 주로 보안 관련 헤더를 설정.

	3) CsrfFilter : CSRF(Cross-Site Request Forgery) 공격을 방지 
						 이 필터는 GET 을 제외한 상태 변경 요청(POST, PUT, DELETE 등) 에 대해 CSRF 토큰을 검증 
						 
	4) LogoutFilter : 로그아웃 요청을 처리 
	
	5) UsernamePasswordAuthenticationFilter : 	기본적인 폼 로그인 요청을 처리하는 필터 (세션 기반)
																	사용자가 로그인 폼을 통해 인증을 시도하는 경우 이 필터가 실행
																	만일 JWT 기반의 인증을 처리하고 싶다면, 이 필터 대신 우리가 필터를
																	커스텀하여 사용해야 한다
	6) BearerTokenAuthenticationFilter	: 	Bearer 토큰 인증을 처리 			
															요청헤더에서 JWT 토큰을 추출하고 이를 검증하여 인증을 처리. 
															유효한 토큰이 없으면 인증 실패로 처리.														
	
	7) RequestCacheAwareFilter : 요청 캐시를 처리 
	
	8)	SecurityContextHolderAwareRequestFilter : 현재 보안 컨텍스트를 요청에 추가함 
																		SecurityContextHolder 를 사용하여, 현재 인증된 사용자의 
																		정보(보안 컨텍스트)를 요청에 추가 
																																		
	9) AnonymousAuthenticationFilter : 인증되지 않은 사용자를 익명사용자로 처리.	
														이 필터는 인증이 없을 때 실행되며 익명사용자로 간주 
																																
	10) SessionManagementFilter : 	세션 관리 기능을 처리 
													세션 고정 공격 반지 등을 포함
																														 
	11) ExceptionTranslationFilter	 : 	인증 및 권한 부여 과정에서 발생하는 예외를 처리 
													인증 예외가 발생하면, 이 필터는 AuthenticationEntryPoint 를 호출하여 인증 실패 처리 
													
	12) FilterSecurityInterceptor : 	최종 요청 보안 필터(마지막 단계)로 접근 제어를 수행 
													인증이 필요한 리소스에 대한 접근 거부 시, 예외가 발생하고 이 예외를 처리하는 필터는
													ExceptionTranslationFilter이다.
											
	* OncePerRequestFilter		: 		특정 위치에 배치되는 것이 아니라, Spring Security 필터 체인 내에서 개발자가 필요로 하는
													위치에 배치할 수 있다. 이 필터는 HTTP 요청 당 한 번만 실행되도록 보장하는 추상클래스이며,
													주로 JWT 토큰 검증, 로깅, 트래픽 모니터링의 작업에 사용됨..										
	
	
	 						 
						 
						 