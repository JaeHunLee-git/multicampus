<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 하위 컨트롤러가 뷰이름을 DispatcherServlet 에게 반환하면, 반환된 이름을 이용하여 완전한 jsp
		경로를 만들어주는 뷰해결사 객체를 등록하자
		여러 유형 중 접두어 접미어 조합을 처리하는 InternaleResourceViewResolver를 쓰자 
	-->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/"
		p:suffix=".jsp"/>
	
	<!--
		지정한 패키지를 검색하여,  스프링이 이해하는 컴포넌트 어노테이션이 붙은 클래스들을 인스턴스화 시킴 
		@Controller (하위 컨트롤러), @Repository(DAO), @Service(서비스)
		정형적이지 않은 즉 분류가 되지 않는 객체를 등록하고 싶을때 @Component 라고 하면 됨
	-->
	<context:component-scan base-package="com.sds.mall.client.controller"/>
	<context:component-scan base-package="com.sds.mall.admin.controller"/>
	<context:component-scan base-package="com.sds.mall.model"/>
	
	
	<!-- MVC 기반의 컨트롤러 측의 많은 기능을 지원하기 위한 태그 등록
		주의할 점: 이 태그를 먼저 등록해야 mvc 기반의 기능들을 사용할 수 있다 
		예를 들어 아래의 <mvc:resources/> 등등..
	 -->
	<mvc:annotation-driven/>
	
	<!-- 스프링 MVC 에서는 모든 요청을 하나의 진입점인 DispatcherServlet이 받기 때문에, 이 서블릿이 우리의 정적 자원들의
		위치를 알기 위해서는 아래의 resources 태그가 등록되어야 한다.. 
	 -->			
	 <mvc:resources location="/resources/" mapping="/static/**"/>
	 
	 
	 <!-- 
	 	지난 번 프로젝트에서는  mybatis나 hibernate 또는 JDBC를 이용할때는 DB 커넥션을 개발자가 주도하여 취득하였슴 
	 	엔터프라이즈에서 EJB나 스프링을 사용하는 이유는 트랜잭션, 보안처리 등을 개발자가 일일이 처리하지 않기 위함이므로, 
	 	금일 부터는 어떠한 퍼시스턴스 영역의 기술을 사용하던, 스프링이 DB연동을 주도하도록 해야 자동으로 트랜잭션, 보안 등을 
	 	처리할 수 있다..
	  -->
	  
	  <!-- 스프링이 JNDI를 접근하도록 하자-->
	  <jee:jndi-lookup
		  	id="dataSource" 
		  	jndi-name="jndi/mysql"
		  	resource-ref="true"/>
	
		<!-- 데이터베이스를 스프링이 취득했으므로, 어떠한 종류의 퍼시스턴스 기술(Hibernate, Mybatis, JPA..)을 사용하던 
			트랜잭션 처리를 스프링이 알아서 해준다..하지만, 개발자가 사용하는 기술에 따라 어떠한 트랜잭션 처리 빈을 사용할지를
			개발자가 명시해줘야 한다.. 
			JDBC  :  DataSourceTransactionManager 빈을 등록 
			Mybatis : DataSourceTransactionManager 빈을 등록 (Mybatis 는 내부적으로 JDBC를 사용하므로)
			Hibernate : HibernateTransctionManager 빈을 등록
			
			주의할점) 스프링을 이용한 데이터베이스 연동을 사용하려면, 다음과 같은 의존성이 필요하다 
			
			1) spring jdbc
			2) mybatis spring
		-->
		<!-- 트랜잭션 매니저는 어떤 DB를 연동하고 있는지를 알아야 하므로, 위에 등록된 DataSource를 주입받아야 한다 -->
		<bean id="dataSourceTransactionManager" 
				class="org.springframework.jdbc.datasource.DataSourceTransactionManager" 
				p:dataSource-ref="dataSource"/>
		
		<!--  
			그냥 Mybatis에서는 SqlSession 을 모아놓은 객체가 바로 SqlSessionFactory 였다면, 
			Mybatis Spring에서는 SqlSession의 명칭이 SqlSessionTemplate 으로, 
			SqlSessionFactory는 SqlSessionFactoryBean으로 바뀐다
			따라서 SqlSessionFactoryBean 객체를 먼저 등록하자
		-->				 
		<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean"
			p:dataSource-ref="dataSource"
			p:configLocation="classpath:/com/sds/mall/mybatis/mybatis-config.xml"/>
			
		<!-- DAO가 쿼리문 수행 시 필요한 객체인 SqlSessionTemplate 을 등록 -->
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
			<constructor-arg ref="sqlSessionFactoryBean"/>
		</bean>			
			
		
</beans>







